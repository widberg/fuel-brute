#include <iostream>
#include <iomanip>
#include <fstream>
#include <set>
#include <string>
#include <cstdint>
#include <unordered_map>
#include <unordered_set>
#include <sstream>

typedef std::uint32_t crc32_t;

struct pair_t
{
	crc32_t crc32;
	std::uint8_t i;
};

#define CRC32_POLYNOMIAL (0x04C11DB7U)
#define REVERSE_CRC32_TABLE_SIZE (256U)
pair_t reverse_crc32_table[REVERSE_CRC32_TABLE_SIZE] = {
	{ 0x00000000, 0x00 }, { 0x018aeb13, 0x4c }, { 0x029f3d35, 0xd4 }, { 0x0315d626, 0x98 }, { 0x04c11db7, 0x01 }, { 0x054bf6a4, 0x4d }, { 0x065e2082, 0xd5 }, { 0x07d4cb91, 0x99 },
	{ 0x0808d07d, 0x4e }, { 0x09823b6e, 0x02 }, { 0x0a97ed48, 0x9a }, { 0x0b1d065b, 0xd6 }, { 0x0cc9cdca, 0x4f }, { 0x0d4326d9, 0x03 }, { 0x0e56f0ff, 0x9b }, { 0x0fdc1bec, 0xd7 },
	{ 0x1011a0fa, 0x9c }, { 0x119b4be9, 0xd0 }, { 0x128e9dcf, 0x48 }, { 0x130476dc, 0x04 }, { 0x14d0bd4d, 0x9d }, { 0x155a565e, 0xd1 }, { 0x164f8078, 0x49 }, { 0x17c56b6b, 0x05 },
	{ 0x18197087, 0xd2 }, { 0x19939b94, 0x9e }, { 0x1a864db2, 0x06 }, { 0x1b0ca6a1, 0x4a }, { 0x1cd86d30, 0xd3 }, { 0x1d528623, 0x9f }, { 0x1e475005, 0x07 }, { 0x1fcdbb16, 0x4b },
	{ 0x2056cd3a, 0xdd }, { 0x21dc2629, 0x91 }, { 0x22c9f00f, 0x09 }, { 0x23431b1c, 0x45 }, { 0x2497d08d, 0xdc }, { 0x251d3b9e, 0x90 }, { 0x2608edb8, 0x08 }, { 0x278206ab, 0x44 },
	{ 0x285e1d47, 0x93 }, { 0x29d4f654, 0xdf }, { 0x2ac12072, 0x47 }, { 0x2b4bcb61, 0x0b }, { 0x2c9f00f0, 0x92 }, { 0x2d15ebe3, 0xde }, { 0x2e003dc5, 0x46 }, { 0x2f8ad6d6, 0x0a },
	{ 0x30476dc0, 0x41 }, { 0x31cd86d3, 0x0d }, { 0x32d850f5, 0x95 }, { 0x3352bbe6, 0xd9 }, { 0x34867077, 0x40 }, { 0x350c9b64, 0x0c }, { 0x36194d42, 0x94 }, { 0x3793a651, 0xd8 },
	{ 0x384fbdbd, 0x0f }, { 0x39c556ae, 0x43 }, { 0x3ad08088, 0xdb }, { 0x3b5a6b9b, 0x97 }, { 0x3c8ea00a, 0x0e }, { 0x3d044b19, 0x42 }, { 0x3e119d3f, 0xda }, { 0x3f9b762c, 0x96 },
	{ 0x40d816ba, 0x5f }, { 0x4152fda9, 0x13 }, { 0x42472b8f, 0x8b }, { 0x43cdc09c, 0xc7 }, { 0x44190b0d, 0x5e }, { 0x4593e01e, 0x12 }, { 0x46863638, 0x8a }, { 0x470cdd2b, 0xc6 },
	{ 0x48d0c6c7, 0x11 }, { 0x495a2dd4, 0x5d }, { 0x4a4ffbf2, 0xc5 }, { 0x4bc510e1, 0x89 }, { 0x4c11db70, 0x10 }, { 0x4d9b3063, 0x5c }, { 0x4e8ee645, 0xc4 }, { 0x4f040d56, 0x88 },
	{ 0x50c9b640, 0xc3 }, { 0x51435d53, 0x8f }, { 0x52568b75, 0x17 }, { 0x53dc6066, 0x5b }, { 0x5408abf7, 0xc2 }, { 0x558240e4, 0x8e }, { 0x569796c2, 0x16 }, { 0x571d7dd1, 0x5a },
	{ 0x58c1663d, 0x8d }, { 0x594b8d2e, 0xc1 }, { 0x5a5e5b08, 0x59 }, { 0x5bd4b01b, 0x15 }, { 0x5c007b8a, 0x8c }, { 0x5d8a9099, 0xc0 }, { 0x5e9f46bf, 0x58 }, { 0x5f15adac, 0x14 },
	{ 0x608edb80, 0x82 }, { 0x61043093, 0xce }, { 0x6211e6b5, 0x56 }, { 0x639b0da6, 0x1a }, { 0x644fc637, 0x83 }, { 0x65c52d24, 0xcf }, { 0x66d0fb02, 0x57 }, { 0x675a1011, 0x1b },
	{ 0x68860bfd, 0xcc }, { 0x690ce0ee, 0x80 }, { 0x6a1936c8, 0x18 }, { 0x6b93dddb, 0x54 }, { 0x6c47164a, 0xcd }, { 0x6dcdfd59, 0x81 }, { 0x6ed82b7f, 0x19 }, { 0x6f52c06c, 0x55 },
	{ 0x709f7b7a, 0x1e }, { 0x71159069, 0x52 }, { 0x7200464f, 0xca }, { 0x738aad5c, 0x86 }, { 0x745e66cd, 0x1f }, { 0x75d48dde, 0x53 }, { 0x76c15bf8, 0xcb }, { 0x774bb0eb, 0x87 },
	{ 0x7897ab07, 0x50 }, { 0x791d4014, 0x1c }, { 0x7a089632, 0x84 }, { 0x7b827d21, 0xc8 }, { 0x7c56b6b0, 0x51 }, { 0x7ddc5da3, 0x1d }, { 0x7ec98b85, 0x85 }, { 0x7f436096, 0xc9 },
	{ 0x803ac667, 0xf2 }, { 0x81b02d74, 0xbe }, { 0x82a5fb52, 0x26 }, { 0x832f1041, 0x6a }, { 0x84fbdbd0, 0xf3 }, { 0x857130c3, 0xbf }, { 0x8664e6e5, 0x27 }, { 0x87ee0df6, 0x6b },
	{ 0x8832161a, 0xbc }, { 0x89b8fd09, 0xf0 }, { 0x8aad2b2f, 0x68 }, { 0x8b27c03c, 0x24 }, { 0x8cf30bad, 0xbd }, { 0x8d79e0be, 0xf1 }, { 0x8e6c3698, 0x69 }, { 0x8fe6dd8b, 0x25 },
	{ 0x902b669d, 0x6e }, { 0x91a18d8e, 0x22 }, { 0x92b45ba8, 0xba }, { 0x933eb0bb, 0xf6 }, { 0x94ea7b2a, 0x6f }, { 0x95609039, 0x23 }, { 0x9675461f, 0xbb }, { 0x97ffad0c, 0xf7 },
	{ 0x9823b6e0, 0x20 }, { 0x99a95df3, 0x6c }, { 0x9abc8bd5, 0xf4 }, { 0x9b3660c6, 0xb8 }, { 0x9ce2ab57, 0x21 }, { 0x9d684044, 0x6d }, { 0x9e7d9662, 0xf5 }, { 0x9ff77d71, 0xb9 },
	{ 0xa06c0b5d, 0x2f }, { 0xa1e6e04e, 0x63 }, { 0xa2f33668, 0xfb }, { 0xa379dd7b, 0xb7 }, { 0xa4ad16ea, 0x2e }, { 0xa527fdf9, 0x62 }, { 0xa6322bdf, 0xfa }, { 0xa7b8c0cc, 0xb6 },
	{ 0xa864db20, 0x61 }, { 0xa9ee3033, 0x2d }, { 0xaafbe615, 0xb5 }, { 0xab710d06, 0xf9 }, { 0xaca5c697, 0x60 }, { 0xad2f2d84, 0x2c }, { 0xae3afba2, 0xb4 }, { 0xafb010b1, 0xf8 },
	{ 0xb07daba7, 0xb3 }, { 0xb1f740b4, 0xff }, { 0xb2e29692, 0x67 }, { 0xb3687d81, 0x2b }, { 0xb4bcb610, 0xb2 }, { 0xb5365d03, 0xfe }, { 0xb6238b25, 0x66 }, { 0xb7a96036, 0x2a },
	{ 0xb8757bda, 0xfd }, { 0xb9ff90c9, 0xb1 }, { 0xbaea46ef, 0x29 }, { 0xbb60adfc, 0x65 }, { 0xbcb4666d, 0xfc }, { 0xbd3e8d7e, 0xb0 }, { 0xbe2b5b58, 0x28 }, { 0xbfa1b04b, 0x64 },
	{ 0xc0e2d0dd, 0xad }, { 0xc1683bce, 0xe1 }, { 0xc27dede8, 0x79 }, { 0xc3f706fb, 0x35 }, { 0xc423cd6a, 0xac }, { 0xc5a92679, 0xe0 }, { 0xc6bcf05f, 0x78 }, { 0xc7361b4c, 0x34 },
	{ 0xc8ea00a0, 0xe3 }, { 0xc960ebb3, 0xaf }, { 0xca753d95, 0x37 }, { 0xcbffd686, 0x7b }, { 0xcc2b1d17, 0xe2 }, { 0xcda1f604, 0xae }, { 0xceb42022, 0x36 }, { 0xcf3ecb31, 0x7a },
	{ 0xd0f37027, 0x31 }, { 0xd1799b34, 0x7d }, { 0xd26c4d12, 0xe5 }, { 0xd3e6a601, 0xa9 }, { 0xd4326d90, 0x30 }, { 0xd5b88683, 0x7c }, { 0xd6ad50a5, 0xe4 }, { 0xd727bbb6, 0xa8 },
	{ 0xd8fba05a, 0x7f }, { 0xd9714b49, 0x33 }, { 0xda649d6f, 0xab }, { 0xdbee767c, 0xe7 }, { 0xdc3abded, 0x7e }, { 0xddb056fe, 0x32 }, { 0xdea580d8, 0xaa }, { 0xdf2f6bcb, 0xe6 },
	{ 0xe0b41de7, 0x70 }, { 0xe13ef6f4, 0x3c }, { 0xe22b20d2, 0xa4 }, { 0xe3a1cbc1, 0xe8 }, { 0xe4750050, 0x71 }, { 0xe5ffeb43, 0x3d }, { 0xe6ea3d65, 0xa5 }, { 0xe760d676, 0xe9 },
	{ 0xe8bccd9a, 0x3e }, { 0xe9362689, 0x72 }, { 0xea23f0af, 0xea }, { 0xeba91bbc, 0xa6 }, { 0xec7dd02d, 0x3f }, { 0xedf73b3e, 0x73 }, { 0xeee2ed18, 0xeb }, { 0xef68060b, 0xa7 },
	{ 0xf0a5bd1d, 0xec }, { 0xf12f560e, 0xa0 }, { 0xf23a8028, 0x38 }, { 0xf3b06b3b, 0x74 }, { 0xf464a0aa, 0xed }, { 0xf5ee4bb9, 0xa1 }, { 0xf6fb9d9f, 0x39 }, { 0xf771768c, 0x75 },
	{ 0xf8ad6d60, 0xa2 }, { 0xf9278673, 0xee }, { 0xfa325055, 0x76 }, { 0xfbb8bb46, 0x3a }, { 0xfc6c70d7, 0xa3 }, { 0xfde69bc4, 0xef }, { 0xfef34de2, 0x77 }, { 0xff79a6f1, 0x3b },
};

crc32_t reverse_crc32(crc32_t hash, const std::string& str)
{
	for (auto it = str.rbegin(); it != str.rend(); ++it)
	{
		const pair_t& pair = reverse_crc32_table[hash >> 24];
		hash = ((hash ^ pair.crc32) << 8) | (pair.i ^ std::tolower(*it));
	}

	return hash;
}

int main()
{
	std::unordered_map<std::string, std::unordered_set<std::string>> exts;

	std::ifstream fexts("exts.txt");
	if (!fexts.good()) return 3;

	std::string className;
	while (fexts >> className)
	{
		std::string extstr;
		std::getline(fexts, extstr);
		std::stringstream ss(extstr);

		std::string ext;
		while (ss >> ext)
		{
			exts[className].insert(ext);
		}
	}

	std::ifstream in("crc32s.txt");
	if (!in.good()) return 1;

	std::set<crc32_t> hashes;
	std::string line;
	while (std::getline(in, line))
	{
		// crc32,x,className,x,text

		if (line[line.size() - 1] != ',')
		{
			continue;
		}

		crc32_t hash;

		try
		{
			hash = std::stol(line);
		}
		catch (const std::exception& e)
		{
			break;
		}

		std::size_t pos = line.find(',');
		std::size_t start = line.find(',', pos + 1) + 1;
		std::size_t end = line.find(',', start);

		std::string className = line.substr(start, end - start);

		if (!exts.count(className))
		{
			continue;
		}

		const std::unordered_set<std::string>& extensions = exts[className];

		for (auto it : extensions)
		{
			crc32_t temp = reverse_crc32(hash, it);
			hashes.insert(temp);
			std::cout << hash << " " << temp << " " << it << "\n";
		}
	}

	in.close();

	std::ofstream out("reduced.hash", std::ios::binary);
	if (!out.good()) return 2;

	std::uint64_t size = hashes.size();
	out.write(reinterpret_cast<char*>(&size), sizeof(size));
	for (crc32_t crc32 : hashes)
	{
		out.write(reinterpret_cast<char*>(&crc32), sizeof(crc32));
	}

	out.close();

	return 0;
}
